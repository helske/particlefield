// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// R_approx_binomial_car
Rcpp::List R_approx_binomial_car(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs, const double tau, const double d, const Eigen::Map<Eigen::MatrixXd> y, const Eigen::Map<Eigen::MatrixXi> n_y, const Eigen::Map<Eigen::MatrixXd> u, const double mu, const bool use_mu, const Eigen::Map<Eigen::VectorXd> initial_mode, const unsigned int max_iter, const double conv_tol, const bool reorder, const bool ratio_correction);
RcppExport SEXP _smccar_R_approx_binomial_car(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP, SEXP ySEXP, SEXP n_ySEXP, SEXP uSEXP, SEXP muSEXP, SEXP use_muSEXP, SEXP initial_modeSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP reorderSEXP, SEXP ratio_correctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_mu(use_muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_mode(initial_modeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type reorder(reorderSEXP);
    Rcpp::traits::input_parameter< const bool >::type ratio_correction(ratio_correctionSEXP);
    rcpp_result_gen = Rcpp::wrap(R_approx_binomial_car(nnbs, nbs, tau, d, y, n_y, u, mu, use_mu, initial_mode, max_iter, conv_tol, reorder, ratio_correction));
    return rcpp_result_gen;
END_RCPP
}
// R_bsf_binomial_car
Rcpp::List R_bsf_binomial_car(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs, const double tau, const double d, const Eigen::Map<Eigen::MatrixXd> y, const Eigen::Map<Eigen::MatrixXi> n_y, const Eigen::Map<Eigen::MatrixXd> u, const double mu, const bool use_mu, const unsigned int n_particles, const unsigned int seed, const bool reorder, const double ess_threshold);
RcppExport SEXP _smccar_R_bsf_binomial_car(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP, SEXP ySEXP, SEXP n_ySEXP, SEXP uSEXP, SEXP muSEXP, SEXP use_muSEXP, SEXP n_particlesSEXP, SEXP seedSEXP, SEXP reorderSEXP, SEXP ess_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_mu(use_muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_particles(n_particlesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type reorder(reorderSEXP);
    Rcpp::traits::input_parameter< const double >::type ess_threshold(ess_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(R_bsf_binomial_car(nnbs, nbs, tau, d, y, n_y, u, mu, use_mu, n_particles, seed, reorder, ess_threshold));
    return rcpp_result_gen;
END_RCPP
}
// R_amcmc_binomial_car
Rcpp::List R_amcmc_binomial_car(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs, const double tau, const double d, const Eigen::Map<Eigen::MatrixXd> y, const Eigen::Map<Eigen::VectorXi> n_y, const Eigen::Map<Eigen::MatrixXd> u, const double mu, const bool use_mu, const unsigned int n_iter, const unsigned int n_burnin, const Eigen::Map<Eigen::VectorXd> initial_theta, const Eigen::Map<Eigen::VectorXd> initial_mode, Eigen::Map<Eigen::MatrixXd> S, const unsigned int max_iter, const double conv_tol, const unsigned int seed, const bool ratio_correction, const bool reorder);
RcppExport SEXP _smccar_R_amcmc_binomial_car(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP, SEXP ySEXP, SEXP n_ySEXP, SEXP uSEXP, SEXP muSEXP, SEXP use_muSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP initial_thetaSEXP, SEXP initial_modeSEXP, SEXP SSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP seedSEXP, SEXP ratio_correctionSEXP, SEXP reorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_mu(use_muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_theta(initial_thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_mode(initial_modeSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type ratio_correction(ratio_correctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type reorder(reorderSEXP);
    rcpp_result_gen = Rcpp::wrap(R_amcmc_binomial_car(nnbs, nbs, tau, d, y, n_y, u, mu, use_mu, n_iter, n_burnin, initial_theta, initial_mode, S, max_iter, conv_tol, seed, ratio_correction, reorder));
    return rcpp_result_gen;
END_RCPP
}
// R_mcmc_binomial_car
Rcpp::List R_mcmc_binomial_car(const Eigen::VectorXi nnbs, const Eigen::MatrixXi nbs, const double tau, const double d, const Eigen::MatrixXd y, const Eigen::VectorXi n_y, const Eigen::MatrixXd u, const double mu, const bool use_mu, const unsigned int n_iter, const unsigned int n_burnin, const Eigen::VectorXd initial_theta, const Eigen::VectorXd initial_mode, Eigen::MatrixXd S, const unsigned int max_iter, const double conv_tol, const unsigned int seed, const unsigned int n_particles, const bool reorder, const double ess_threshold);
RcppExport SEXP _smccar_R_mcmc_binomial_car(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP, SEXP ySEXP, SEXP n_ySEXP, SEXP uSEXP, SEXP muSEXP, SEXP use_muSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP initial_thetaSEXP, SEXP initial_modeSEXP, SEXP SSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP seedSEXP, SEXP n_particlesSEXP, SEXP reorderSEXP, SEXP ess_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_mu(use_muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type initial_theta(initial_thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type initial_mode(initial_modeSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_particles(n_particlesSEXP);
    Rcpp::traits::input_parameter< const bool >::type reorder(reorderSEXP);
    Rcpp::traits::input_parameter< const double >::type ess_threshold(ess_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(R_mcmc_binomial_car(nnbs, nbs, tau, d, y, n_y, u, mu, use_mu, n_iter, n_burnin, initial_theta, initial_mode, S, max_iter, conv_tol, seed, n_particles, reorder, ess_threshold));
    return rcpp_result_gen;
END_RCPP
}
// R_print_graph
void R_print_graph(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs);
RcppExport SEXP _smccar_R_print_graph(SEXP nnbsSEXP, SEXP nbsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    R_print_graph(nnbs, nbs);
    return R_NilValue;
END_RCPP
}
// R_car_Q
Eigen::SparseMatrix<double> R_car_Q(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs, const double tau, const double d);
RcppExport SEXP _smccar_R_car_Q(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(R_car_Q(nnbs, nbs, tau, d));
    return rcpp_result_gen;
END_RCPP
}
// R_psi_binomial_car
Rcpp::List R_psi_binomial_car(const Eigen::Map<Eigen::VectorXi> nnbs, const Eigen::Map<Eigen::MatrixXi> nbs, const double tau, const double d, const Eigen::Map<Eigen::MatrixXd> y, const Eigen::Map<Eigen::MatrixXi> n_y, const Eigen::Map<Eigen::MatrixXd> u, const double mu, const bool use_mu, const unsigned int n_particles, const Eigen::Map<Eigen::VectorXd> initial_mode, const unsigned int max_iter, const double conv_tol, const unsigned int seed, const bool reorder, const double ess_threshold);
RcppExport SEXP _smccar_R_psi_binomial_car(SEXP nnbsSEXP, SEXP nbsSEXP, SEXP tauSEXP, SEXP dSEXP, SEXP ySEXP, SEXP n_ySEXP, SEXP uSEXP, SEXP muSEXP, SEXP use_muSEXP, SEXP n_particlesSEXP, SEXP initial_modeSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP seedSEXP, SEXP reorderSEXP, SEXP ess_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type nnbs(nnbsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_mu(use_muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_particles(n_particlesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_mode(initial_modeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type reorder(reorderSEXP);
    Rcpp::traits::input_parameter< const double >::type ess_threshold(ess_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(R_psi_binomial_car(nnbs, nbs, tau, d, y, n_y, u, mu, use_mu, n_particles, initial_mode, max_iter, conv_tol, seed, reorder, ess_threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smccar_R_approx_binomial_car", (DL_FUNC) &_smccar_R_approx_binomial_car, 14},
    {"_smccar_R_bsf_binomial_car", (DL_FUNC) &_smccar_R_bsf_binomial_car, 13},
    {"_smccar_R_amcmc_binomial_car", (DL_FUNC) &_smccar_R_amcmc_binomial_car, 19},
    {"_smccar_R_mcmc_binomial_car", (DL_FUNC) &_smccar_R_mcmc_binomial_car, 20},
    {"_smccar_R_print_graph", (DL_FUNC) &_smccar_R_print_graph, 2},
    {"_smccar_R_car_Q", (DL_FUNC) &_smccar_R_car_Q, 4},
    {"_smccar_R_psi_binomial_car", (DL_FUNC) &_smccar_R_psi_binomial_car, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_smccar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
